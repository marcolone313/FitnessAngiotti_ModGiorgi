package com.oscinnovation.fitness.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClienteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteAllPropertiesEquals(Cliente expected, Cliente actual) {
        assertClienteAutoGeneratedPropertiesEquals(expected, actual);
        assertClienteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteAllUpdatablePropertiesEquals(Cliente expected, Cliente actual) {
        assertClienteUpdatableFieldsEquals(expected, actual);
        assertClienteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteAutoGeneratedPropertiesEquals(Cliente expected, Cliente actual) {
        assertThat(expected)
            .as("Verify Cliente auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteUpdatableFieldsEquals(Cliente expected, Cliente actual) {
        assertThat(expected)
            .as("Verify Cliente relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCognome()).as("check cognome").isEqualTo(actual.getCognome()))
            .satisfies(e -> assertThat(e.getDataDiNascita()).as("check dataDiNascita").isEqualTo(actual.getDataDiNascita()))
            .satisfies(e -> assertThat(e.getCodiceFiscale()).as("check codiceFiscale").isEqualTo(actual.getCodiceFiscale()))
            .satisfies(e -> assertThat(e.getCodiceCliente()).as("check codiceCliente").isEqualTo(actual.getCodiceCliente()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getTelefono()).as("check telefono").isEqualTo(actual.getTelefono()))
            .satisfies(e -> assertThat(e.getFoto()).as("check foto").isEqualTo(actual.getFoto()))
            .satisfies(e -> assertThat(e.getFotoContentType()).as("check foto contenty type").isEqualTo(actual.getFotoContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteUpdatableRelationshipsEquals(Cliente expected, Cliente actual) {
        // empty method
    }
}
