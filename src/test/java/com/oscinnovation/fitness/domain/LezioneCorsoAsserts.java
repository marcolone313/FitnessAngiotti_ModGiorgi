package com.oscinnovation.fitness.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LezioneCorsoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLezioneCorsoAllPropertiesEquals(LezioneCorso expected, LezioneCorso actual) {
        assertLezioneCorsoAutoGeneratedPropertiesEquals(expected, actual);
        assertLezioneCorsoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLezioneCorsoAllUpdatablePropertiesEquals(LezioneCorso expected, LezioneCorso actual) {
        assertLezioneCorsoUpdatableFieldsEquals(expected, actual);
        assertLezioneCorsoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLezioneCorsoAutoGeneratedPropertiesEquals(LezioneCorso expected, LezioneCorso actual) {
        assertThat(expected)
            .as("Verify LezioneCorso auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLezioneCorsoUpdatableFieldsEquals(LezioneCorso expected, LezioneCorso actual) {
        assertThat(expected)
            .as("Verify LezioneCorso relevant properties")
            .satisfies(e -> assertThat(e.getTitolo()).as("check titolo").isEqualTo(actual.getTitolo()))
            .satisfies(e -> assertThat(e.getDescrizione()).as("check descrizione").isEqualTo(actual.getDescrizione()))
            .satisfies(e -> assertThat(e.getPuntiFocali()).as("check puntiFocali").isEqualTo(actual.getPuntiFocali()))
            .satisfies(e -> assertThat(e.getVideoUrl()).as("check videoUrl").isEqualTo(actual.getVideoUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLezioneCorsoUpdatableRelationshipsEquals(LezioneCorso expected, LezioneCorso actual) {
        assertThat(expected)
            .as("Verify LezioneCorso relationships")
            .satisfies(e -> assertThat(e.getCorsoAcademy()).as("check corsoAcademy").isEqualTo(actual.getCorsoAcademy()));
    }
}
