package com.oscinnovation.fitness.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlicometriaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlicometriaAllPropertiesEquals(Plicometria expected, Plicometria actual) {
        assertPlicometriaAutoGeneratedPropertiesEquals(expected, actual);
        assertPlicometriaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlicometriaAllUpdatablePropertiesEquals(Plicometria expected, Plicometria actual) {
        assertPlicometriaUpdatableFieldsEquals(expected, actual);
        assertPlicometriaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlicometriaAutoGeneratedPropertiesEquals(Plicometria expected, Plicometria actual) {
        assertThat(expected)
            .as("Verify Plicometria auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlicometriaUpdatableFieldsEquals(Plicometria expected, Plicometria actual) {
        assertThat(expected)
            .as("Verify Plicometria relevant properties")
            .satisfies(e -> assertThat(e.getTricipite()).as("check tricipite").isEqualTo(actual.getTricipite()))
            .satisfies(e -> assertThat(e.getPetto()).as("check petto").isEqualTo(actual.getPetto()))
            .satisfies(e -> assertThat(e.getAscella()).as("check ascella").isEqualTo(actual.getAscella()))
            .satisfies(e -> assertThat(e.getSottoscapolare()).as("check sottoscapolare").isEqualTo(actual.getSottoscapolare()))
            .satisfies(e -> assertThat(e.getSoprailliaca()).as("check soprailliaca").isEqualTo(actual.getSoprailliaca()))
            .satisfies(e -> assertThat(e.getAddome()).as("check addome").isEqualTo(actual.getAddome()))
            .satisfies(e -> assertThat(e.getCoscia()).as("check coscia").isEqualTo(actual.getCoscia()))
            .satisfies(e -> assertThat(e.getMese()).as("check mese").isEqualTo(actual.getMese()))
            .satisfies(e -> assertThat(e.getDataInserimento()).as("check dataInserimento").isEqualTo(actual.getDataInserimento()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlicometriaUpdatableRelationshipsEquals(Plicometria expected, Plicometria actual) {
        assertThat(expected)
            .as("Verify Plicometria relationships")
            .satisfies(e -> assertThat(e.getCliente()).as("check cliente").isEqualTo(actual.getCliente()));
    }
}
