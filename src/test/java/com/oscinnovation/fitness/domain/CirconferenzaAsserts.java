package com.oscinnovation.fitness.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CirconferenzaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCirconferenzaAllPropertiesEquals(Circonferenza expected, Circonferenza actual) {
        assertCirconferenzaAutoGeneratedPropertiesEquals(expected, actual);
        assertCirconferenzaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCirconferenzaAllUpdatablePropertiesEquals(Circonferenza expected, Circonferenza actual) {
        assertCirconferenzaUpdatableFieldsEquals(expected, actual);
        assertCirconferenzaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCirconferenzaAutoGeneratedPropertiesEquals(Circonferenza expected, Circonferenza actual) {
        assertThat(expected)
            .as("Verify Circonferenza auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCirconferenzaUpdatableFieldsEquals(Circonferenza expected, Circonferenza actual) {
        assertThat(expected)
            .as("Verify Circonferenza relevant properties")
            .satisfies(e -> assertThat(e.getTorace()).as("check torace").isEqualTo(actual.getTorace()))
            .satisfies(e -> assertThat(e.getBraccio()).as("check braccio").isEqualTo(actual.getBraccio()))
            .satisfies(e -> assertThat(e.getAvambraccio()).as("check avambraccio").isEqualTo(actual.getAvambraccio()))
            .satisfies(e -> assertThat(e.getOmbelico()).as("check ombelico").isEqualTo(actual.getOmbelico()))
            .satisfies(e -> assertThat(e.getFianchi()).as("check fianchi").isEqualTo(actual.getFianchi()))
            .satisfies(e -> assertThat(e.getSottoOmbelico()).as("check sottoOmbelico").isEqualTo(actual.getSottoOmbelico()))
            .satisfies(e -> assertThat(e.getVita()).as("check vita").isEqualTo(actual.getVita()))
            .satisfies(e -> assertThat(e.getCoscia()).as("check coscia").isEqualTo(actual.getCoscia()))
            .satisfies(e -> assertThat(e.getMese()).as("check mese").isEqualTo(actual.getMese()))
            .satisfies(e -> assertThat(e.getDataInserimento()).as("check dataInserimento").isEqualTo(actual.getDataInserimento()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCirconferenzaUpdatableRelationshipsEquals(Circonferenza expected, Circonferenza actual) {
        assertThat(expected)
            .as("Verify Circonferenza relationships")
            .satisfies(e -> assertThat(e.getCliente()).as("check cliente").isEqualTo(actual.getCliente()));
    }
}
