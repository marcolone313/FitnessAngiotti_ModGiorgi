package com.oscinnovation.fitness.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportSettimanaleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportSettimanaleAllPropertiesEquals(ReportSettimanale expected, ReportSettimanale actual) {
        assertReportSettimanaleAutoGeneratedPropertiesEquals(expected, actual);
        assertReportSettimanaleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportSettimanaleAllUpdatablePropertiesEquals(ReportSettimanale expected, ReportSettimanale actual) {
        assertReportSettimanaleUpdatableFieldsEquals(expected, actual);
        assertReportSettimanaleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportSettimanaleAutoGeneratedPropertiesEquals(ReportSettimanale expected, ReportSettimanale actual) {
        assertThat(expected)
            .as("Verify ReportSettimanale auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportSettimanaleUpdatableFieldsEquals(ReportSettimanale expected, ReportSettimanale actual) {
        assertThat(expected)
            .as("Verify ReportSettimanale relevant properties")
            .satisfies(e -> assertThat(e.getVoto()).as("check voto").isEqualTo(actual.getVoto()))
            .satisfies(e ->
                assertThat(e.getCommentoAllenamento()).as("check commentoAllenamento").isEqualTo(actual.getCommentoAllenamento())
            )
            .satisfies(e -> assertThat(e.getGiorniDieta()).as("check giorniDieta").isEqualTo(actual.getGiorniDieta()))
            .satisfies(e -> assertThat(e.getPesoMedio()).as("check pesoMedio").isEqualTo(actual.getPesoMedio()))
            .satisfies(e -> assertThat(e.getQualitaSonno()).as("check qualitaSonno").isEqualTo(actual.getQualitaSonno()))
            .satisfies(e -> assertThat(e.getMediaOreSonno()).as("check mediaOreSonno").isEqualTo(actual.getMediaOreSonno()))
            .satisfies(e -> assertThat(e.getDataCreazione()).as("check dataCreazione").isEqualTo(actual.getDataCreazione()))
            .satisfies(e -> assertThat(e.getDataScadenza()).as("check dataScadenza").isEqualTo(actual.getDataScadenza()))
            .satisfies(e -> assertThat(e.getDataCompletamento()).as("check dataCompletamento").isEqualTo(actual.getDataCompletamento()))
            .satisfies(e -> assertThat(e.getPuntuale()).as("check puntuale").isEqualTo(actual.getPuntuale()))
            .satisfies(e -> assertThat(e.getAnalisiReport()).as("check analisiReport").isEqualTo(actual.getAnalisiReport()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportSettimanaleUpdatableRelationshipsEquals(ReportSettimanale expected, ReportSettimanale actual) {
        assertThat(expected)
            .as("Verify ReportSettimanale relationships")
            .satisfies(e -> assertThat(e.getSchedaSettimanale()).as("check schedaSettimanale").isEqualTo(actual.getSchedaSettimanale()))
            .satisfies(e -> assertThat(e.getCliente()).as("check cliente").isEqualTo(actual.getCliente()));
    }
}
