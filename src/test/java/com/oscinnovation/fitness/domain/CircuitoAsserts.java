package com.oscinnovation.fitness.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CircuitoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCircuitoAllPropertiesEquals(Circuito expected, Circuito actual) {
        assertCircuitoAutoGeneratedPropertiesEquals(expected, actual);
        assertCircuitoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCircuitoAllUpdatablePropertiesEquals(Circuito expected, Circuito actual) {
        assertCircuitoUpdatableFieldsEquals(expected, actual);
        assertCircuitoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCircuitoAutoGeneratedPropertiesEquals(Circuito expected, Circuito actual) {
        assertThat(expected)
            .as("Verify Circuito auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCircuitoUpdatableFieldsEquals(Circuito expected, Circuito actual) {
        assertThat(expected)
            .as("Verify Circuito relevant properties")
            .satisfies(e -> assertThat(e.getTempoLimite()).as("check tempoLimite").isEqualTo(actual.getTempoLimite()))
            .satisfies(e -> assertThat(e.getTempoImpiegato()).as("check tempoImpiegato").isEqualTo(actual.getTempoImpiegato()))
            .satisfies(e -> assertThat(e.getCatenaRipetizioni()).as("check catenaRipetizioni").isEqualTo(actual.getCatenaRipetizioni()))
            .satisfies(e -> assertThat(e.getCircuitiCompletati()).as("check circuitiCompletati").isEqualTo(actual.getCircuitiCompletati()))
            .satisfies(e -> assertThat(e.getSvolto()).as("check svolto").isEqualTo(actual.getSvolto()))
            .satisfies(e -> assertThat(e.getCompletato()).as("check completato").isEqualTo(actual.getCompletato()))
            .satisfies(e -> assertThat(e.getFeedback()).as("check feedback").isEqualTo(actual.getFeedback()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCircuitoUpdatableRelationshipsEquals(Circuito expected, Circuito actual) {
        assertThat(expected)
            .as("Verify Circuito relationships")
            .satisfies(e ->
                assertThat(e.getAllenamentoGiornaliero()).as("check allenamentoGiornaliero").isEqualTo(actual.getAllenamentoGiornaliero())
            );
    }
}
